var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EditorType } from "object-gui";
import { ClickEventsOptionsEditor } from "./ClickEventsOptionsEditor";
import { HoverEventsOptionsEditor } from "./HoverEventsOptionsEditor";
import { DivsEventsOptionsEditor } from "./DivsEventsOptionsEditor";
import { EditorBase } from "../../../../EditorBase";
export class EventsOptionsEditor extends EditorBase {
    constructor(particles) {
        super(particles);
    }
    addToGroup(parent) {
        this.group = parent.addGroup("events", "Events");
        this.options = this.group.data;
        this.addClick();
        this.addDivs();
        this.addHover();
        this.addProperties();
    }
    addClick() {
        const clickEditor = new ClickEventsOptionsEditor(this.particles);
        clickEditor.addToGroup(this.group);
    }
    addDivs() {
        const divsEditor = new DivsEventsOptionsEditor(this.particles);
        divsEditor.addToGroup(this.group);
    }
    addHover() {
        const hoverEditor = new HoverEventsOptionsEditor(this.particles);
        hoverEditor.addToGroup(this.group);
    }
    addProperties() {
        const particles = this.particles;
        this.group.addProperty("resize", "Resize", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
}
