var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EditorType } from "object-gui";
import { EditorBase } from "../../../EditorBase";
export class InfectionOptionsEditor extends EditorBase {
    constructor(particles) {
        super(particles);
    }
    addToGroup(parent) {
        this.group = parent.addGroup("infection", "Infection");
        this.options = this.group.data;
        this.addStages();
        this.addProperties();
    }
    addProperties() {
        const particles = this.particles;
        this.group.addProperty("cure", "Cure", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        this.group.addProperty("delay", "Delay", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        this.group.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        this.group.addProperty("infections", "Infections", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addStages() {
        const particles = this.particles;
        const options = this.options;
        const stagesGroup = this.group.addGroup("stages", "Stages");
        for (let i = 0; i < options.stages.length; i++) {
            this.addStage(stagesGroup, options.stages, i + 1);
        }
        stagesGroup.addButton("addStage", "Add Stage", false).click(() => __awaiter(this, void 0, void 0, function* () {
            this.addStage(stagesGroup, options.stages, options.stages.length);
            yield particles.refresh();
        }));
    }
    addStage(parent, stages, index) {
        const particles = this.particles;
        const stageGroup = parent.addGroup(index.toString(10), `Stage ${index}`, true, stages);
        const stage = stageGroup.data;
        stageGroup
            .addProperty("color", "Color", EditorType.color, stage.color, false)
            .change((value) => __awaiter(this, void 0, void 0, function* () {
            if (typeof value === "string") {
                if (typeof stage.color === "string") {
                    stage.color = value;
                }
                else {
                    stage.color = {
                        value,
                    };
                }
            }
            yield particles.refresh();
        }));
        stageGroup.addProperty("duration", "Duration", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        stageGroup.addProperty("infectedStage", "Infected Stage", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        stageGroup.addProperty("radius", "Radius", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        stageGroup.addProperty("rate", "Rate", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
}
