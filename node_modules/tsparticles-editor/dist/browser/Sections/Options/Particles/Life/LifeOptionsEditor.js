var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EditorBase } from "../../../../EditorBase";
import { EditorType } from "object-gui";
export class LifeOptionsEditor extends EditorBase {
    constructor(particles) {
        super(particles);
    }
    addToGroup(parent, options) {
        this.group = parent.addGroup("life", "Life", true, options);
        this.options = this.group.data;
        this.options.count;
        this.addDelay();
        this.addDuration();
        this.addProperties();
    }
    addDelay() {
        const particles = this.particles;
        const group = this.group.addGroup("delay", "Delay");
        const randomGroup = group.addGroup("random", "Random");
        randomGroup.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        randomGroup.addProperty("minimumValue", "MinimumValue", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("sync", "Sync", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("value", "Value", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addDuration() {
        const particles = this.particles;
        const group = this.group.addGroup("duration", "Duration");
        const randomGroup = group.addGroup("random", "Random");
        randomGroup.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        randomGroup.addProperty("minimumValue", "MinimumValue", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("sync", "Sync", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("value", "Value", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addProperties() {
        const particles = this.particles;
        this.group.addProperty("count", "Count", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
}
