var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EditorType } from "object-gui";
import { EditorBase } from "../../../../EditorBase";
export class RollOptionsEditor extends EditorBase {
    constructor(particles) {
        super(particles);
    }
    addToGroup(parent) {
        this.group = parent.addGroup("roll", "Roll");
        this.options = this.group.data;
        this.addDarken();
        this.addEnlighten();
        this.addProperties();
    }
    addDarken() {
        const particles = this.particles;
        const group = this.group.addGroup("darken", "Darken");
        group.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("value", "Value", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addEnlighten() {
        const particles = this.particles;
        const group = this.group.addGroup("enlighten", "Enlighten");
        group.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("value", "Value", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addProperties() {
        var _a;
        const particles = this.particles;
        const color = typeof this.options.backColor === "string"
            ? this.options.backColor
            : this.options.backColor instanceof Array
                ? this.options.backColor[0]
                : (_a = this.options.backColor) === null || _a === void 0 ? void 0 : _a.value;
        this.group
            .addProperty("backColor", "Back Color", EditorType.color, color, false)
            .change((value) => __awaiter(this, void 0, void 0, function* () {
            if (typeof value === "string") {
                if (typeof this.options.backColor === "string") {
                    this.options.backColor = value;
                }
                else {
                    if (this.options.backColor === undefined) {
                        this.options.backColor = {
                            value: value,
                        };
                    }
                    else {
                        if (this.options.backColor instanceof Array) {
                            this.options.backColor = {
                                value: value,
                            };
                        }
                        else {
                            this.options.backColor.value = value;
                        }
                    }
                }
            }
            yield particles.refresh();
        }));
        this.group.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        this.group.addProperty("speed", "Speed", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
}
