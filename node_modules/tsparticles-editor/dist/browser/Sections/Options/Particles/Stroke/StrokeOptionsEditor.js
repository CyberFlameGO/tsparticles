var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ColorOptionsEditor } from "../Color/ColorOptionsEditor";
import { EditorType } from "object-gui";
import { EditorBase } from "../../../../EditorBase";
export class StrokeOptionsEditor extends EditorBase {
    constructor(particles) {
        super(particles);
    }
    addToGroup(parent) {
        this.group = parent.addGroup("stroke", "Stroke");
        this.options = this.group.data;
        if (this.options instanceof Array) {
            for (let i = 0; i < this.options.length; i++) {
                const group = this.group.addGroup(i.toString(10), `Stroke_${i + 1}`, true, this.options);
                this.addStroke(group);
            }
        }
        else {
            this.addStroke(this.group);
        }
    }
    addStroke(group) {
        const particles = this.particles;
        const options = group.data;
        if (options.color === undefined) {
            options.color = {
                value: "",
                animation: {
                    count: 0,
                    enable: false,
                    offset: { max: 0, min: 0 },
                    speed: 0,
                    sync: false,
                },
            };
        }
        const colorOptions = new ColorOptionsEditor(this.particles);
        colorOptions.addToGroup(group, options);
        group
            .addProperty("opacity", "Opacity", EditorType.number)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .step(0.01)
            .min(0)
            .max(1);
        group.addProperty("width", "Width", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
}
