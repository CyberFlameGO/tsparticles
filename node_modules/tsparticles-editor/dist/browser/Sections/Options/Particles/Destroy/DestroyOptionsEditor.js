var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EditorBase } from "../../../../EditorBase";
import { EditorType } from "object-gui";
export class DestroyOptionsEditor extends EditorBase {
    constructor(particles) {
        super(particles);
    }
    addToGroup(parent) {
        this.group = parent.addGroup("destroy", "Destroy");
        this.options = this.group.data;
        this.addSplit();
        this.addProperties();
    }
    addSplit() {
        const group = this.group.addGroup("split", "Split");
        const particles = this.particles;
        const factorGroup = group.addGroup("factor", "Factor");
        const randomFactorGroup = factorGroup.addGroup("random", "Random");
        randomFactorGroup.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        randomFactorGroup.addProperty("minimumValue", "Minimum Value", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        factorGroup.addProperty("value", "Value", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        const rateGroup = group.addGroup("rate", "Rate");
        const randomRateGroup = rateGroup.addGroup("random", "Random");
        randomRateGroup.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        randomRateGroup.addProperty("minimumValue", "Minimum Value", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        rateGroup.addProperty("value", "Value", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("count", "Count", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            particles.refresh();
        }));
    }
    addProperties() {
        const group = this.group;
        const particles = this.particles;
        group
            .addProperty("mode", "Mode", EditorType.select)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            particles.refresh();
        }))
            .addItems([
            {
                value: "none",
            },
            {
                value: "split",
            },
        ]);
    }
}
