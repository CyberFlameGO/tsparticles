var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EditorType } from "object-gui";
import { EditorBase } from "../../../../EditorBase";
export class ShapeOptionsEditor extends EditorBase {
    constructor(particles) {
        super(particles);
    }
    addToGroup(parent) {
        this.group = parent.addGroup("shape", "Shape");
        this.options = this.group.data;
        this.addProperties();
    }
    addProperties() {
        const particles = this.particles;
        const selectType = this.group.addProperty("type", "Type", EditorType.select).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        for (const key of particles.drawers.keys()) {
            selectType.addItem(key);
        }
    }
}
