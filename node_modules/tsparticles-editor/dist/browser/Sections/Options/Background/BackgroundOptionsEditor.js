var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EditorType } from "object-gui";
import { EditorBase } from "../../../EditorBase";
export class BackgroundOptionsEditor extends EditorBase {
    constructor(particles) {
        super(particles);
    }
    addToGroup(parent) {
        this.group = parent.addGroup("background", "Background");
        this.options = this.group.data;
        this.addColor();
        this.addProperties();
    }
    addColor() {
        const particles = this.particles;
        const options = this.options.color;
        this.group
            .addProperty("color", "Color", EditorType.color, options.value, false)
            .change((value) => __awaiter(this, void 0, void 0, function* () {
            if (typeof value === "string") {
                options.value = value;
            }
            yield particles.refresh();
        }));
    }
    addProperties() {
        const particles = this.particles;
        this.group.addProperty("image", "Image", EditorType.string).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        this.group
            .addProperty("opacity", "Opacity", EditorType.number)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .step(0.01)
            .min(0)
            .max(1);
        this.group.addProperty("position", "Position", EditorType.string).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        this.group.addProperty("repeat", "Repeat", EditorType.string).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        this.group.addProperty("size", "Size", EditorType.string).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
}
