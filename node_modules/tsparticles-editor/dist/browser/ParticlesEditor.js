var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { OptionsEditor } from "./Sections/Options/OptionsEditor";
import { Editor, EditorType } from "object-gui";
export class ParticlesEditor extends Editor {
    constructor(particles) {
        super(particles.id, "tsParticles", particles);
        this.particles = particles;
    }
    customize() {
        super.customize();
        this.addOptions();
        this.addButtons();
        this.addPresets();
    }
    addPreset(text, file) {
        if (!this._presets) {
            return;
        }
        this._presets.addItem(file, text);
    }
    addOptions() {
        const options = new OptionsEditor(this.data);
        options.addToGroup(this);
    }
    addButtons() {
        this.addButton("play", "Play");
        this.addButton("pause", "Pause");
        this.addButton("refresh", "Refresh");
        this.addButton("start", "Start");
        this.addButton("stop", "Stop");
        this.addButton("exportConfig", "Export", false).click(() => {
            const json = this.particles.exportConfiguration();
            const contentType = "application/json";
            const blob = new Blob([json], { type: contentType });
            const url = URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.download = "particles.json";
            a.href = url;
            a.dataset.downloadUrl = [contentType, a.download, a.href].join(":");
            const e = document.createEvent("MouseEvents");
            e.initMouseEvent("click", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
            a.dispatchEvent(e);
        });
    }
    addPresets() {
        this._presets = this.addProperty("preset", "Preset", EditorType.select, "", false);
        this._presets.change((value) => __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield fetch(value);
                if (!res.ok) {
                    return;
                }
                yield this.particles.reset();
                this.particles.options.load(yield res.json());
                yield this.particles.refresh();
            }
            catch (_a) {
            }
        }));
    }
}
