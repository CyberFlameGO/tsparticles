var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EditorType } from "object-gui";
import { EditorBase } from "../../../../EditorBase";
export class CollisionsOptionsEditor extends EditorBase {
    constructor(particles) {
        super(particles);
    }
    addToGroup(parent) {
        this.group = parent.addGroup("collisions", "Collisions");
        this.options = this.group.data;
        this.addBounce();
        this.addOverlap();
        this.addProperties();
    }
    addBounce() {
        const group = this.group.addGroup("bounce", "Bounce");
        this.addBounceFactor(group, "horizontal", "Horizontal");
        this.addBounceFactor(group, "vertical", "Vertical");
    }
    addBounceFactor(parentGroup, name, title) {
        const particles = this.particles;
        const group = parentGroup.addGroup(name, title);
        const randomGroup = group.addGroup("random", "Random");
        randomGroup.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        randomGroup.addProperty("minimumValue", "Minimum Value", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("value", "Value", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addOverlap() {
        const particles = this.particles;
        const group = this.group.addGroup("overlap", "Overlap");
        group.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("retries", "Retries", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addProperties() {
        const particles = this.particles;
        this.group.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        this.group
            .addProperty("mode", "Mode", EditorType.select)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .addItems([
            {
                value: "absorb",
            },
            {
                value: "bounce",
            },
            {
                value: "destroy",
            },
        ]);
    }
}
