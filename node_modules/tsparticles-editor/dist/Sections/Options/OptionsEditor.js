var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { BackgroundOptionsEditor } from "./Background/BackgroundOptionsEditor";
import { ParticlesOptionsEditor } from "./Particles/ParticlesOptionsEditor";
import { InteractivityOptionsEditor } from "./Interactivity/InteractivityOptionsEditor";
import { BackgroundMaskOptionsEditor } from "./BackgroundMask/BackgroundMaskOptionsEditor";
import { InfectionOptionsEditor } from "./Infection/InfectionOptionsEditor";
import { EditorType } from "object-gui";
import { EditorBase } from "../../EditorBase";
import { FullScreenOptionsEditor } from "./FullScreen/FullScreenOptionsEditor";
import { MotionOptionsEditor } from "./Motion/MotionOptionsEditor";
export class OptionsEditor extends EditorBase {
    constructor(particles) {
        super(particles);
    }
    addToGroup(parent) {
        this.group = parent.addGroup("options", "Options", true);
        this.options = this.group.data;
        this.addBackground();
        this.addBackgroundMask();
        this.addFullScreen();
        this.addInfection();
        this.addInteractivity();
        this.addMotion();
        this.addParticles();
        this.addProperties();
    }
    addProperties() {
        const particles = this.particles;
        this.group.addProperty("autoPlay", "Auto Play", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        this.group.addProperty("detectRetina", "Detect Retina", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        this.group.addProperty("fpsLimit", "FPS Limit", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        this.group.addProperty("pauseOnBlur", "Pause on Blur", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        this.group
            .addProperty("pauseOnOutsideViewport", "Pause on Outside Viewport", EditorType.boolean)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addBackground() {
        const options = new BackgroundOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addBackgroundMask() {
        const options = new BackgroundMaskOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addFullScreen() {
        const options = new FullScreenOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addInfection() {
        const options = new InfectionOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addInteractivity() {
        const options = new InteractivityOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addMotion() {
        const options = new MotionOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addParticles() {
        const options = new ParticlesOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
}
