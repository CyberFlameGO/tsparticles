var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EditorType } from "object-gui";
import { EditorBase } from "../../../../EditorBase";
export class DivsEventsOptionsEditor extends EditorBase {
    constructor(particles) {
        super(particles);
    }
    addToGroup(parent) {
        this.group = parent.addGroup("onDiv", "Divs Events");
        this.options = this.group.data;
        this.addDivs();
        if (this.options instanceof Array) {
            this.group.addButton("addDiv", "Add Div", false).click(() => __awaiter(this, void 0, void 0, function* () {
                const arr = this.options;
                const divGroup = this.group.addGroup(arr.length.toString(10), `Div ${arr.length + 1}`, true, this.options);
                this.addDiv(divGroup);
                yield this.particles.refresh();
            }));
        }
    }
    addDivs() {
        const options = this.options;
        if (options instanceof Array) {
            for (let i = 0; i < options.length; i++) {
                const group = this.group.addGroup(i.toString(10), `Div_${i + 1}`, true, options);
                this.addDiv(group);
            }
        }
        else {
            this.addDiv(this.group);
        }
    }
    addDiv(group) {
        const particles = this.particles;
        const options = group.data;
        if (options.selectors instanceof Array) {
            const selectorsGroup = group.addGroup("selectors", "Selectors");
            selectorsGroup.addButton("addSelector", "Add Selector", false).click(() => __awaiter(this, void 0, void 0, function* () {
                const arr = options.selectors;
                selectorsGroup
                    .addProperty(arr.length.toString(10), `Selector ${arr.length + 1}`, EditorType.string)
                    .change(() => __awaiter(this, void 0, void 0, function* () {
                    yield particles.refresh();
                }));
                yield this.particles.refresh();
            }));
        }
        else {
            group.addProperty("selectors", "Selectors", EditorType.string).change(() => __awaiter(this, void 0, void 0, function* () {
                yield particles.refresh();
            }));
        }
        group
            .addProperty("enable", "Enable", EditorType.boolean)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .step(0.01)
            .min(0)
            .max(1);
        this.group
            .addProperty("mode", "Mode", EditorType.select)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .addItems([
            {
                value: "bounce",
            },
            {
                value: "bubble",
            },
            {
                value: "repulse",
            },
        ]);
        group
            .addProperty("type", "Type", EditorType.select)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .addItems([
            {
                value: "circle",
            },
            {
                value: "rectangle",
            },
        ]);
    }
}
