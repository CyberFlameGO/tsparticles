var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EditorType } from "object-gui";
import { EditorBase } from "../../../EditorBase";
export class BackgroundMaskOptionsEditor extends EditorBase {
    constructor(particles) {
        super(particles);
    }
    addToGroup(parent) {
        this.group = parent.addGroup("backgroundMask", "Background Mask");
        this.options = this.group.data;
        this.addCover();
        this.addProperties();
    }
    addCover() {
        const particles = this.particles;
        const options = this.options.cover;
        const coverColor = options.color;
        const coverGroup = this.group.addGroup("cover", "Cover");
        coverGroup
            .addProperty("color", "Color", EditorType.color, coverColor.value, false)
            .change((value) => __awaiter(this, void 0, void 0, function* () {
            if (typeof value === "string") {
                coverColor.value = value;
            }
            yield particles.refresh();
        }));
        coverGroup
            .addProperty("opacity", "Opacity", EditorType.number)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .step(0.01)
            .min(0)
            .max(1);
    }
    addProperties() {
        const particles = this.particles;
        this.group
            .addProperty("composite", "Composite", EditorType.select)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .addItems([
            {
                value: "source-over",
            },
            {
                value: "source-in",
            },
            {
                value: "source-out",
            },
            {
                value: "source-atop",
            },
            {
                value: "destination-over",
            },
            {
                value: "destination-in",
            },
            {
                value: "destination-out",
            },
            {
                value: "destination-atop",
            },
            {
                value: "lighter",
            },
            {
                value: "copy",
            },
            {
                value: "xor",
            },
            {
                value: "multiply",
            },
            {
                value: "screen",
            },
            {
                value: "overlay",
            },
            {
                value: "darken",
            },
            {
                value: "lighten",
            },
            {
                value: "color-dodge",
            },
            {
                value: "color-burn",
            },
            {
                value: "hard-light",
            },
            {
                value: "soft-light",
            },
            {
                value: "difference",
            },
            {
                value: "exclusion",
            },
            {
                value: "hue",
            },
            {
                value: "saturation",
            },
            {
                value: "color",
            },
            {
                value: "luminosity",
            },
        ]);
        this.group.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
}
