var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EditorType } from "object-gui";
import { EditorBase } from "../../../../EditorBase";
import { ParticlesOptionsEditor } from "../../Particles/ParticlesOptionsEditor";
export class ModesOptionsEditor extends EditorBase {
    constructor(particles) {
        super(particles);
    }
    addToGroup(parent) {
        this.group = parent.addGroup("modes", "Modes");
        this.options = this.group.data;
        this.addAttract();
        this.addBubble();
        this.addConnect();
        this.addGrab();
        this.addLight();
        this.addPush();
        this.addRemove();
        this.addRepulse();
        this.addSlow();
        this.addTrail();
    }
    addAttract() {
        const particles = this.particles;
        const group = this.group.addGroup("attract", "Attract");
        group.addProperty("distance", "Distance", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("duration", "Duration", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group
            .addProperty("easing", "Easing", EditorType.select)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .addItems([
            {
                value: "ease-out-back",
            },
            {
                value: "ease-out-circ",
            },
            {
                value: "ease-out-cubic",
            },
            {
                value: "ease-out-expo",
            },
            {
                value: "ease-out-quad",
            },
            {
                value: "ease-out-quint",
            },
            {
                value: "ease-out-sine",
            },
        ]);
        group.addProperty("factor", "Factor", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("maxSpeed", "Max Speed", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("speed", "Speed", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addBubble() {
        var _a;
        const particles = this.particles;
        const options = this.options.bubble;
        const group = this.group.addGroup("bubble", "Bubble");
        const color = typeof options.color === "string"
            ? options.color
            : options.color instanceof Array
                ? undefined
                : (_a = options.color) === null || _a === void 0 ? void 0 : _a.value;
        group.addProperty("color", "Color", EditorType.color, color, false).change((value) => __awaiter(this, void 0, void 0, function* () {
            if (typeof value === "string") {
                if (typeof options.color === "string") {
                    options.color = value;
                }
                else {
                    options.color = {
                        value,
                    };
                }
            }
            yield particles.refresh();
        }));
        group.addProperty("distance", "Distance", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("duration", "Duration", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group
            .addProperty("opacity", "Opacity", EditorType.number)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .step(0.01)
            .min(0)
            .max(1);
        group.addProperty("size", "Size", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addConnect() {
        const particles = this.particles;
        const group = this.group.addGroup("connect", "Connect");
        const connectLinksGroup = group.addGroup("links", "Links");
        connectLinksGroup
            .addProperty("opacity", "Opacity", EditorType.number)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .step(0.01)
            .min(0)
            .max(1);
        group.addProperty("distance", "Distance", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("radius", "Radius", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addGrab() {
        var _a;
        const particles = this.particles;
        const options = this.options.grab;
        const group = this.group.addGroup("grab", "Grab");
        const grabLinksGroup = group.addGroup("links", "Links");
        const links = options.links;
        const color = typeof links.color === "string" ? links.color : (_a = links.color) === null || _a === void 0 ? void 0 : _a.value;
        grabLinksGroup.addProperty("blink", "Blink", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        grabLinksGroup.addProperty("color", "Color", EditorType.color, color, false).change((value) => __awaiter(this, void 0, void 0, function* () {
            if (typeof value === "string") {
                if (typeof options.links.color === "string") {
                    options.links.color = value;
                }
                else {
                    options.links.color = {
                        value,
                    };
                }
                yield particles.refresh();
            }
        }));
        grabLinksGroup.addProperty("consent", "Consent", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        grabLinksGroup
            .addProperty("opacity", "Opacity", EditorType.number)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .step(0.01)
            .min(0)
            .max(1);
        group.addProperty("distance", "Distance", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addLight() {
        var _a, _b, _c;
        const particles = this.particles;
        const options = this.options.light;
        const group = this.group.addGroup("light", "Light");
        const areaGroup = group.addGroup("area", "Light");
        const gradientGroup = areaGroup.addGroup("gradient", "Gradient");
        const startColor = typeof options.area.gradient.start === "string"
            ? options.area.gradient.start
            : (_a = options.area.gradient.start) === null || _a === void 0 ? void 0 : _a.value;
        gradientGroup
            .addProperty("start", "Start", EditorType.color, startColor, false)
            .change((value) => __awaiter(this, void 0, void 0, function* () {
            if (typeof value === "string") {
                if (typeof options.area.gradient.start === "string") {
                    options.area.gradient.start = value;
                }
                else {
                    options.area.gradient.start = {
                        value,
                    };
                }
            }
            yield particles.refresh();
        }));
        const stopColor = typeof options.area.gradient.stop === "string"
            ? options.area.gradient.stop
            : (_b = options.area.gradient.stop) === null || _b === void 0 ? void 0 : _b.value;
        gradientGroup.addProperty("stop", "Stop", EditorType.color, stopColor, false).change((value) => __awaiter(this, void 0, void 0, function* () {
            if (typeof value === "string") {
                if (typeof options.area.gradient.stop === "string") {
                    options.area.gradient.stop = value;
                }
                else {
                    options.area.gradient.stop = {
                        value,
                    };
                }
            }
            yield particles.refresh();
        }));
        areaGroup.addProperty("radius", "Radius", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        const shadowGroup = group.addGroup("shadow", "Shadow");
        const shadowColor = typeof options.shadow.color === "string" ? options.shadow.color : (_c = options.shadow.color) === null || _c === void 0 ? void 0 : _c.value;
        shadowGroup
            .addProperty("color", "Color", EditorType.color, shadowColor, false)
            .change((value) => __awaiter(this, void 0, void 0, function* () {
            if (typeof value === "string") {
                if (typeof options.shadow.color === "string") {
                    options.shadow.color = value;
                }
                else {
                    options.shadow.color = {
                        value,
                    };
                }
            }
            yield particles.refresh();
        }));
        shadowGroup.addProperty("length", "Length", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addPush() {
        const particles = this.particles;
        const group = this.group.addGroup("push", "Push");
        group.addProperty("quantity", "Quantity", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addRemove() {
        const particles = this.particles;
        const group = this.group.addGroup("remove", "Remove");
        group.addProperty("quantity", "Quantity", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addRepulse() {
        const particles = this.particles;
        const group = this.group.addGroup("repulse", "Repulse");
        group.addProperty("distance", "Distance", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("duration", "Duration", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group
            .addProperty("easing", "Easing", EditorType.select)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .addItems([
            {
                value: "ease-out-back",
            },
            {
                value: "ease-out-circ",
            },
            {
                value: "ease-out-cubic",
            },
            {
                value: "ease-out-expo",
            },
            {
                value: "ease-out-quad",
            },
            {
                value: "ease-out-quint",
            },
            {
                value: "ease-out-sine",
            },
        ]);
        group.addProperty("factor", "Factor", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("maxSpeed", "Max Speed", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("speed", "Speed", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addSlow() {
        const particles = this.particles;
        const group = this.group.addGroup("slow", "Slow");
        group.addProperty("factor", "Factor", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("radius", "Radius", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addTrail() {
        const particles = this.particles;
        const group = this.group.addGroup("trail", "Trail");
        const options = this.options.trail;
        const particlesEditor = new ParticlesOptionsEditor(particles);
        particlesEditor.addToGroup(group, "particles", options);
        group.addProperty("delay", "Delay", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("pauseOnStop", "Pause on Stop", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("quantity", "Quantity", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
}
