var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EditorType } from "object-gui";
import { loadAbsorbersPlugin, loadEmittersPlugin } from "tsparticles";
import { EditorBase } from "../../../../EditorBase";
export class ClickEventsOptionsEditor extends EditorBase {
    constructor(particles) {
        super(particles);
    }
    addToGroup(parent) {
        this.group = parent.addGroup("onClick", "Click Events");
        this.options = this.group.data;
        this.addProperties();
    }
    addProperties() {
        const particles = this.particles;
        this.group.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        const modeSelectInput = this.group
            .addProperty("mode", "Mode", EditorType.select)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .addItems([
            {
                value: "attract",
            },
            {
                value: "bubble",
            },
            {
                value: "pause",
            },
            {
                value: "push",
            },
            {
                value: "remove",
            },
            {
                value: "repulse",
            },
            {
                value: "trail",
            },
        ]);
        if (typeof loadAbsorbersPlugin !== "undefined") {
            const absorbersGroup = "Absorbers";
            modeSelectInput.addItemGroup(absorbersGroup);
            modeSelectInput.addItem("absorber", undefined, absorbersGroup);
        }
        if (typeof loadEmittersPlugin !== "undefined") {
            const emittersGroup = "Emitters";
            modeSelectInput.addItemGroup(emittersGroup);
            modeSelectInput.addItem("emitter", undefined, emittersGroup);
        }
    }
}
