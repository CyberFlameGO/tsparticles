var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EditorType } from "object-gui";
import { EditorBase } from "../../../../EditorBase";
export class MoveOptionsEditor extends EditorBase {
    constructor(particles) {
        super(particles);
    }
    addToGroup(parent) {
        this.group = parent.addGroup("move", "Move");
        this.options = this.group.data;
        this.addAngle();
        this.addAttract();
        this.addDistance();
        this.addGravity();
        this.addOutModes();
        this.addPath();
        this.addTrail();
        this.addProperties();
    }
    addAngle() {
        const particles = this.particles;
        const group = this.group.addGroup("angle", "Angle");
        group.addProperty("offset", "Offset", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("value", "Value", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addAttract() {
        const particles = this.particles;
        const group = this.group.addGroup("attract", "Attract");
        const rotateGroup = group.addGroup("rotate", "Rotate", false);
        rotateGroup.addProperty("x", "X", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        rotateGroup.addProperty("y", "Y", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addDistance() {
        const particles = this.particles;
        const group = this.group.addGroup("distance", "Distance");
        group.addProperty("horizontal", "Horizontal", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("vertical", "Vertical", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addGravity() {
        const particles = this.particles;
        const group = this.group.addGroup("gravity", "Gravity");
        group.addProperty("acceleration", "Acceleration", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("maxSpeed", "Max Speed", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addOutModes() {
        const particles = this.particles;
        const group = this.group.addGroup("outModes", "Out Modes");
        const outModesValues = [
            {
                value: "bounce",
            },
            {
                value: "destroy",
            },
            {
                value: "none",
            },
            {
                value: "split",
            },
            {
                value: "out",
            },
        ];
        group
            .addProperty("bottom", "Bottom", EditorType.select)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .addItems(outModesValues);
        group
            .addProperty("default", "Default", EditorType.select)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .addItems(outModesValues);
        group
            .addProperty("left", "Left", EditorType.select)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .addItems(outModesValues);
        group
            .addProperty("right", "Right", EditorType.select)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .addItems(outModesValues);
        group
            .addProperty("top", "Top", EditorType.select)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .addItems(outModesValues);
    }
    addPath() {
        const particles = this.particles;
        const group = this.group.addGroup("path", "Path");
        const delayGroup = group.addGroup("delay", "Delay");
        delayGroup.addProperty("value", "value", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        const randomGroup = delayGroup.addGroup("random", "Random");
        randomGroup.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        randomGroup.addProperty("minimumValue", "Minimum Value", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("clamp", "Clamp", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("generator", "Generator", EditorType.string).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addTrail() {
        var _a;
        const particles = this.particles;
        const group = this.group.addGroup("trail", "Trail");
        const options = group.data;
        const color = typeof options.fillColor === "string" ? options.fillColor : (_a = options.fillColor) === null || _a === void 0 ? void 0 : _a.value;
        group.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("fillColor", "Fill Color", EditorType.color, color, false).change((value) => __awaiter(this, void 0, void 0, function* () {
            if (typeof value === "string") {
                if (typeof options.fillColor === "string") {
                    options.fillColor = value;
                }
                else {
                    if (options.fillColor === undefined) {
                        options.fillColor = {
                            value: value,
                        };
                    }
                    else {
                        options.fillColor.value = value;
                    }
                }
            }
            yield particles.refresh();
        }));
        group.addProperty("length", "Length", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addProperties() {
        const particles = this.particles;
        const group = this.group;
        group
            .addProperty("direction", "Direction", EditorType.select)
            .change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }))
            .addItems([
            {
                value: "bottom",
            },
            {
                value: "bottom-left",
            },
            {
                value: "bottom-right",
            },
            {
                value: "left",
            },
            {
                value: "none",
            },
            {
                value: "right",
            },
            {
                value: "top",
            },
            {
                value: "top-left",
            },
            {
                value: "top-right",
            },
        ]);
        group.addProperty("drift", "Drift", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("random", "Random", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("size", "Size", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("speed", "Speed", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("straight", "Straight", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("vibrate", "Vibrate", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("warp", "Warp", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
}
