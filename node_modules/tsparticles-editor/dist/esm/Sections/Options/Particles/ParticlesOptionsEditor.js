var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { LinksOptionsEditor } from "./Links/LinksOptionsEditor";
import { OpacityOptionsEditor } from "./Opacity/OpacityOptionsEditor";
import { ColorOptionsEditor } from "./Color/ColorOptionsEditor";
import { NumberOptionsEditor } from "./Number/NumberOptionsEditor";
import { SizeOptionsEditor } from "./Size/SizeOptionsEditor";
import { RotateOptionsEditor } from "./Rotate/RotateOptionsEditor";
import { ShapeOptionsEditor } from "./Shape/ShapeOptionsEditor";
import { MoveOptionsEditor } from "./Move/MoveOptionsEditor";
import { CollisionsOptionsEditor } from "./Collisions/CollisionsOptionsEditor";
import { StrokeOptionsEditor } from "./Stroke/StrokeOptionsEditor";
import { ShadowOptionsEditor } from "./Shadow/ShadowOptionsEditor";
import { TwinkleOptionsEditor } from "./Twinkle/TwinkleOptionsEditor";
import { EditorBase } from "../../../EditorBase";
import { LifeOptionsEditor } from "./Life/LifeOptionsEditor";
import { BounceOptionsEditor } from "./Bounce/BounceOptionsEditor";
import { EditorType } from "object-gui";
import { DestroyOptionsEditor } from "./Destroy/DestroyOptionsEditor";
import { TiltOptionsEditor } from "./Tilt/TiltOptionsEditor";
import { WobbleOptionsEditor } from "./Wobble/WobbleOptionsEditor";
import { RollOptionsEditor } from "./Roll/RollOptionsEditor";
export class ParticlesOptionsEditor extends EditorBase {
    constructor(particles) {
        super(particles);
    }
    addToGroup(parent, customName, parentData) {
        this.group = parent.addGroup(customName !== null && customName !== void 0 ? customName : "particles", "Particles", true, parentData);
        this.options = this.group.data;
        this.addBounce();
        this.addCollisions();
        this.addColor();
        this.addDestroy();
        this.addLife();
        this.addLinks();
        this.addMove();
        this.addNumber();
        this.addOpacity();
        this.addRoll();
        this.addRotate();
        this.addShadow();
        this.addShape();
        this.addSize();
        this.addStroke();
        this.addTilt();
        this.addTwinkle();
        this.addWobble();
        this.addProperties();
    }
    addBounce() {
        const options = new BounceOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addCollisions() {
        const options = new CollisionsOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addColor() {
        const options = new ColorOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addDestroy() {
        const options = new DestroyOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addLife() {
        const options = new LifeOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addLinks() {
        const options = new LinksOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addMove() {
        const options = new MoveOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addNumber() {
        const options = new NumberOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addOpacity() {
        const options = new OpacityOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addRoll() {
        const options = new RollOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addRotate() {
        const options = new RotateOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addShadow() {
        const options = new ShadowOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addShape() {
        const options = new ShapeOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addSize() {
        const options = new SizeOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addStroke() {
        const options = new StrokeOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addTilt() {
        const options = new TiltOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addTwinkle() {
        const options = new TwinkleOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addWobble() {
        const options = new WobbleOptionsEditor(this.particles);
        options.addToGroup(this.group);
    }
    addProperties() {
        const particles = this.particles;
        this.group.addProperty("reduceDuplicates", "Reduce Duplicates", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
}
