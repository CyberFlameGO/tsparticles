var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EditorType } from "object-gui";
import { EditorBase } from "../../../../EditorBase";
export class ShadowOptionsEditor extends EditorBase {
    constructor(particles) {
        super(particles);
    }
    addToGroup(parent) {
        this.group = parent.addGroup("shadow", "Shadow");
        this.options = this.group.data;
        this.addOffset();
        this.addProperties();
    }
    addOffset() {
        const particles = this.particles;
        const group = this.group.addGroup("offset", "Offset");
        group.addProperty("x", "X", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        group.addProperty("y", "Y", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
    addProperties() {
        var _a;
        const particles = this.particles;
        const options = this.options;
        const color = typeof options.color === "string" ? options.color : (_a = options.color) === null || _a === void 0 ? void 0 : _a.value;
        this.group.addProperty("blur", "Blur", EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
        this.group.addProperty("color", "Color", EditorType.color, color, false).change((value) => __awaiter(this, void 0, void 0, function* () {
            if (typeof value === "string") {
                if (typeof options.color === "string") {
                    options.color = value;
                }
                else {
                    options.color.value = value;
                }
            }
            yield particles.refresh();
        }));
        this.group.addProperty("enable", "Enable", EditorType.boolean).change(() => __awaiter(this, void 0, void 0, function* () {
            yield particles.refresh();
        }));
    }
}
