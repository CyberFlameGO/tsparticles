/*!
 * Author : Matteo Bruni
 * MIT license: https://opensource.org/licenses/MIT
 * Demo / Generator : https://particles.js.org/
 * GitHub : https://www.github.com/matteobruni/tsparticles
 * How to use? : Check the GitHub README
 * v1.43.1
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("object-gui"), require("tsparticles"));
	else if(typeof define === 'function' && define.amd)
		define(["object-gui", "tsparticles"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("object-gui"), require("tsparticles")) : factory(root["window"], root["window"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function(__WEBPACK_EXTERNAL_MODULE__807__, __WEBPACK_EXTERNAL_MODULE__764__) {
return /******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 807:
/***/ (function(module) {

module.exports = __WEBPACK_EXTERNAL_MODULE__807__;

/***/ }),

/***/ 764:
/***/ (function(module) {

module.exports = __WEBPACK_EXTERNAL_MODULE__764__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
!function() {
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "showEditor": function() { return /* binding */ showEditor; }
});

// EXTERNAL MODULE: external {"commonjs":"object-gui","commonjs2":"object-gui","amd":"object-gui","root":"window"}
var external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_ = __webpack_require__(807);
;// CONCATENATED MODULE: ./dist/browser/EditorBase.js
class EditorBase {
  constructor(particles) {
    this.particles = particles;
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Background/BackgroundOptionsEditor.js
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class BackgroundOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("background", "Background");
    this.options = this.group.data;
    this.addColor();
    this.addProperties();
  }

  addColor() {
    const particles = this.particles;
    const options = this.options.color;
    this.group.addProperty("color", "Color", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.color, options.value, false).change(value => __awaiter(this, void 0, void 0, function* () {
      if (typeof value === "string") {
        options.value = value;
      }

      yield particles.refresh();
    }));
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("image", "Image", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.string).change(() => __awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("opacity", "Opacity", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => __awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).step(0.01).min(0).max(1);
    this.group.addProperty("position", "Position", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.string).change(() => __awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("repeat", "Repeat", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.string).change(() => __awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("size", "Size", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.string).change(() => __awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/Links/LinksOptionsEditor.js
var LinksOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class LinksOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("links", "Links");
    this.options = this.group.data;
    this.addShadow();
    this.addTriangles();
    this.addProperties();
  }

  addShadow() {
    var _a;

    const particles = this.particles;
    const group = this.group.addGroup("shadow", "Shadow");
    const options = group.data;
    const color = typeof options.color === "string" ? options.color : (_a = options.color) === null || _a === void 0 ? void 0 : _a.value;
    group.addProperty("blur", "Blur", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => LinksOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("color", "Color", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.color, color, false).change(value => LinksOptionsEditor_awaiter(this, void 0, void 0, function* () {
      if (typeof value === "string") {
        if (typeof options.color === "string") {
          options.color = value;
        } else {
          if (options.color === undefined) {
            options.color = {
              value: value
            };
          } else {
            options.color.value = value;
          }
        }
      }

      yield particles.refresh();
    }));
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => LinksOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addTriangles() {
    var _a;

    const particles = this.particles;
    const group = this.group.addGroup("triangles", "Triangles");
    const options = this.options.triangles;
    const color = typeof options.color === "string" ? options.color : (_a = options.color) === null || _a === void 0 ? void 0 : _a.value;
    group.addProperty("color", "Color", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.color, color, false).change(value => LinksOptionsEditor_awaiter(this, void 0, void 0, function* () {
      if (typeof value === "string") {
        if (typeof options.color === "string") {
          options.color = value;
        } else {
          if (options.color === undefined) {
            options.color = {
              value: value
            };
          } else {
            options.color.value = value;
          }
        }
      }

      yield particles.refresh();
    }));
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => LinksOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("frequency", "Frequency", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).min(0).max(1).step(0.01).change(() => LinksOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("opacity", "Opacity", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => LinksOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).step(0.01).min(0).max(1);
  }

  addProperties() {
    var _a;

    const particles = this.particles;
    const options = this.options;
    const color = typeof options.color === "string" ? options.color : (_a = options.color) === null || _a === void 0 ? void 0 : _a.value;
    this.group.addProperty("blink", "Blink", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => LinksOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("color", "Color", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.color, color, false).change(value => LinksOptionsEditor_awaiter(this, void 0, void 0, function* () {
      if (typeof value === "string") {
        if (typeof options.color === "string") {
          options.color = value;
        } else {
          options.color.value = value;
        }

        yield particles.refresh();
      }
    }));
    this.group.addProperty("consent", "Consent", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => LinksOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("distance", "Distance", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => LinksOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => LinksOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("frequency", "Frequency", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).min(0).max(1).step(0.01).change(() => LinksOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("id", "Id", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.string).change(() => LinksOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("opacity", "Opacity", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => LinksOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).step(0.01).min(0).max(1);
    this.group.addProperty("warp", "Warp", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => LinksOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("width", "Width", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => LinksOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/Opacity/OpacityOptionsEditor.js
var OpacityOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class OpacityOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent, options) {
    this.group = parent.addGroup("opacity", "Opacity", true, options);
    this.options = this.group.data;
    this.addAnimation();
    this.addRandom();
    this.addProperties();
  }

  addAnimation() {
    const particles = this.particles;
    const group = this.group.addGroup("animation", "Animation");
    group.addProperty("destroy", "Destroy", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => OpacityOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems([{
      value: "max"
    }, {
      value: "min"
    }, {
      value: "none"
    }]);
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => OpacityOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("minimumValue", "Minimum Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => OpacityOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).min(0).max(0).step(0.01);
    group.addProperty("speed", "Speed", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => OpacityOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).step(0.01);
    group.addProperty("startValue", "Start Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => OpacityOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems([{
      value: "max"
    }, {
      value: "min"
    }, {
      value: "random"
    }]);
    group.addProperty("sync", "Sync", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => OpacityOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addRandom() {
    const particles = this.particles;
    const group = this.group.addGroup("random", "Random");
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => OpacityOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("minimumValue", "Minimum Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => OpacityOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("value", "Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => OpacityOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).min(0).max(1).step(0.01);
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/Color/ColorOptionsEditor.js
var ColorOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class ColorOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent, options) {
    this.group = parent.addGroup("color", "Color", true, options);
    this.options = this.group.data;
    this.addAnimation();
    this.addProperties();
  }

  addAnimation() {
    const particles = this.particles;
    const group = this.group.addGroup("animation", "Animation");
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => ColorOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("speed", "Speed", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ColorOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("sync", "Sync", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => ColorOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("value", "Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.color).change(() => ColorOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/Number/NumberOptionsEditor.js
var NumberOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class NumberOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("number", "Number");
    this.options = this.group.data;
    this.addDensity();
    this.addProperties();
  }

  addDensity() {
    const particles = this.particles;
    const group = this.group.addGroup("density", "Density");
    group.addProperty("area", "Area", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => NumberOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => NumberOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("factor", "Factor", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => NumberOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("limit", "Limit", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => NumberOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("max", "Max", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => NumberOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("value", "Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => NumberOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/Size/SizeOptionsEditor.js
var SizeOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class SizeOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("size", "Size");
    this.options = this.group.data;
    this.addAnimation();
    this.addRandom();
    this.addProperties();
  }

  addAnimation() {
    const particles = this.particles;
    const group = this.group.addGroup("animation", "Animation");
    group.addProperty("destroy", "Destroy", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => SizeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems([{
      value: "max"
    }, {
      value: "min"
    }, {
      value: "none"
    }]);
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => SizeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("minimumValue", "Minimum Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => SizeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("speed", "Speed", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => SizeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("startValue", "Start Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => SizeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems([{
      value: "max"
    }, {
      value: "min"
    }, {
      value: "random"
    }]);
    group.addProperty("sync", "Sync", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => SizeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addRandom() {
    const group = this.group.addGroup("random", "Random");
    const particles = this.particles;
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => SizeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("minimumValue", "Minimum Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => SizeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("value", "Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => SizeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/Rotate/RotateOptionsEditor.js
var RotateOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class RotateOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("rotate", "Rotate");
    this.options = this.group.data;
    this.addAnimation();
    this.addProperties();
  }

  addAnimation() {
    const group = this.group.addGroup("animation", "Animation");
    const particles = this.particles;
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => RotateOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("speed", "Speed", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => RotateOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("sync", "Sync", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => RotateOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("direction", "Direction", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => RotateOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems([{
      value: "clockwise"
    }, {
      value: "counter-clockwise"
    }, {
      value: "random"
    }]);
    this.group.addProperty("path", "Path", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => RotateOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("random", "Random", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => RotateOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("value", "Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => RotateOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/Shape/ShapeOptionsEditor.js
var ShapeOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class ShapeOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("shape", "Shape");
    this.options = this.group.data;
    this.addProperties();
  }

  addProperties() {
    const particles = this.particles;
    const selectType = this.group.addProperty("type", "Type", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => ShapeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));

    for (const key of particles.drawers.keys()) {
      selectType.addItem(key);
    }
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/Move/MoveOptionsEditor.js
var MoveOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class MoveOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("move", "Move");
    this.options = this.group.data;
    this.addAngle();
    this.addAttract();
    this.addDistance();
    this.addGravity();
    this.addOutModes();
    this.addPath();
    this.addTrail();
    this.addProperties();
  }

  addAngle() {
    const particles = this.particles;
    const group = this.group.addGroup("angle", "Angle");
    group.addProperty("offset", "Offset", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("value", "Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addAttract() {
    const particles = this.particles;
    const group = this.group.addGroup("attract", "Attract");
    const rotateGroup = group.addGroup("rotate", "Rotate", false);
    rotateGroup.addProperty("x", "X", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    rotateGroup.addProperty("y", "Y", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addDistance() {
    const particles = this.particles;
    const group = this.group.addGroup("distance", "Distance");
    group.addProperty("horizontal", "Horizontal", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("vertical", "Vertical", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addGravity() {
    const particles = this.particles;
    const group = this.group.addGroup("gravity", "Gravity");
    group.addProperty("acceleration", "Acceleration", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("maxSpeed", "Max Speed", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addOutModes() {
    const particles = this.particles;
    const group = this.group.addGroup("outModes", "Out Modes");
    const outModesValues = [{
      value: "bounce"
    }, {
      value: "destroy"
    }, {
      value: "none"
    }, {
      value: "split"
    }, {
      value: "out"
    }];
    group.addProperty("bottom", "Bottom", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems(outModesValues);
    group.addProperty("default", "Default", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems(outModesValues);
    group.addProperty("left", "Left", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems(outModesValues);
    group.addProperty("right", "Right", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems(outModesValues);
    group.addProperty("top", "Top", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems(outModesValues);
  }

  addPath() {
    const particles = this.particles;
    const group = this.group.addGroup("path", "Path");
    const delayGroup = group.addGroup("delay", "Delay");
    delayGroup.addProperty("value", "value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    const randomGroup = delayGroup.addGroup("random", "Random");
    randomGroup.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    randomGroup.addProperty("minimumValue", "Minimum Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("clamp", "Clamp", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("generator", "Generator", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.string).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addTrail() {
    var _a;

    const particles = this.particles;
    const group = this.group.addGroup("trail", "Trail");
    const options = group.data;
    const color = typeof options.fillColor === "string" ? options.fillColor : (_a = options.fillColor) === null || _a === void 0 ? void 0 : _a.value;
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("fillColor", "Fill Color", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.color, color, false).change(value => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      if (typeof value === "string") {
        if (typeof options.fillColor === "string") {
          options.fillColor = value;
        } else {
          if (options.fillColor === undefined) {
            options.fillColor = {
              value: value
            };
          } else {
            options.fillColor.value = value;
          }
        }
      }

      yield particles.refresh();
    }));
    group.addProperty("length", "Length", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addProperties() {
    const particles = this.particles;
    const group = this.group;
    group.addProperty("direction", "Direction", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems([{
      value: "bottom"
    }, {
      value: "bottom-left"
    }, {
      value: "bottom-right"
    }, {
      value: "left"
    }, {
      value: "none"
    }, {
      value: "right"
    }, {
      value: "top"
    }, {
      value: "top-left"
    }, {
      value: "top-right"
    }]);
    group.addProperty("drift", "Drift", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("random", "Random", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("size", "Size", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("speed", "Speed", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("straight", "Straight", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("vibrate", "Vibrate", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("warp", "Warp", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => MoveOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/Collisions/CollisionsOptionsEditor.js
var CollisionsOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class CollisionsOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("collisions", "Collisions");
    this.options = this.group.data;
    this.addBounce();
    this.addOverlap();
    this.addProperties();
  }

  addBounce() {
    const group = this.group.addGroup("bounce", "Bounce");
    this.addBounceFactor(group, "horizontal", "Horizontal");
    this.addBounceFactor(group, "vertical", "Vertical");
  }

  addBounceFactor(parentGroup, name, title) {
    const particles = this.particles;
    const group = parentGroup.addGroup(name, title);
    const randomGroup = group.addGroup("random", "Random");
    randomGroup.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => CollisionsOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    randomGroup.addProperty("minimumValue", "Minimum Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => CollisionsOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("value", "Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => CollisionsOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addOverlap() {
    const particles = this.particles;
    const group = this.group.addGroup("overlap", "Overlap");
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => CollisionsOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("retries", "Retries", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => CollisionsOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => CollisionsOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("mode", "Mode", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => CollisionsOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems([{
      value: "absorb"
    }, {
      value: "bounce"
    }, {
      value: "destroy"
    }]);
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/Stroke/StrokeOptionsEditor.js
var StrokeOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};




class StrokeOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("stroke", "Stroke");
    this.options = this.group.data;

    if (this.options instanceof Array) {
      for (let i = 0; i < this.options.length; i++) {
        const group = this.group.addGroup(i.toString(10), `Stroke_${i + 1}`, true, this.options);
        this.addStroke(group);
      }
    } else {
      this.addStroke(this.group);
    }
  }

  addStroke(group) {
    const particles = this.particles;
    const options = group.data;

    if (options.color === undefined) {
      options.color = {
        value: "",
        animation: {
          count: 0,
          enable: false,
          offset: {
            max: 0,
            min: 0
          },
          speed: 0,
          sync: false
        }
      };
    }

    const colorOptions = new ColorOptionsEditor(this.particles);
    colorOptions.addToGroup(group, options);
    group.addProperty("opacity", "Opacity", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => StrokeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).step(0.01).min(0).max(1);
    group.addProperty("width", "Width", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => StrokeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/Shadow/ShadowOptionsEditor.js
var ShadowOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class ShadowOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("shadow", "Shadow");
    this.options = this.group.data;
    this.addOffset();
    this.addProperties();
  }

  addOffset() {
    const particles = this.particles;
    const group = this.group.addGroup("offset", "Offset");
    group.addProperty("x", "X", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ShadowOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("y", "Y", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ShadowOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addProperties() {
    var _a;

    const particles = this.particles;
    const options = this.options;
    const color = typeof options.color === "string" ? options.color : (_a = options.color) === null || _a === void 0 ? void 0 : _a.value;
    this.group.addProperty("blur", "Blur", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ShadowOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("color", "Color", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.color, color, false).change(value => ShadowOptionsEditor_awaiter(this, void 0, void 0, function* () {
      if (typeof value === "string") {
        if (typeof options.color === "string") {
          options.color = value;
        } else {
          options.color.value = value;
        }
      }

      yield particles.refresh();
    }));
    this.group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => ShadowOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/Twinkle/TwinkleOptionsEditor.js
var TwinkleOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class TwinkleOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent, options) {
    this.group = parent.addGroup("twinkle", "Twinkle", true, options);
    this.options = this.group.data;
    this.addTwinkle();
  }

  addTwinkle() {
    this.addTwinkleValues(this.group.addGroup("lines", "Lines"));
    this.addTwinkleValues(this.group.addGroup("particles", "Particles"));
  }

  addTwinkleValues(group) {
    var _a;

    const particles = this.particles;
    const options = group.data;
    const color = typeof options.color === "string" ? options.color : (_a = options.color) === null || _a === void 0 ? void 0 : _a.value;
    group.addProperty("color", "Color", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.color, color, false).change(value => TwinkleOptionsEditor_awaiter(this, void 0, void 0, function* () {
      if (typeof value === "string") {
        if (typeof options.color === "string") {
          options.color = value;
        } else {
          options.color = {
            value
          };
        }
      }

      yield particles.refresh();
    }));
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => TwinkleOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("frequency", "Frequency", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => TwinkleOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("opacity", "Opacity", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => TwinkleOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).step(0.01).min(0).max(1);
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/Life/LifeOptionsEditor.js
var LifeOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class LifeOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent, options) {
    this.group = parent.addGroup("life", "Life", true, options);
    this.options = this.group.data;
    this.options.count;
    this.addDelay();
    this.addDuration();
    this.addProperties();
  }

  addDelay() {
    const particles = this.particles;
    const group = this.group.addGroup("delay", "Delay");
    const randomGroup = group.addGroup("random", "Random");
    randomGroup.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => LifeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    randomGroup.addProperty("minimumValue", "MinimumValue", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => LifeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("sync", "Sync", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => LifeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("value", "Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => LifeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addDuration() {
    const particles = this.particles;
    const group = this.group.addGroup("duration", "Duration");
    const randomGroup = group.addGroup("random", "Random");
    randomGroup.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => LifeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    randomGroup.addProperty("minimumValue", "MinimumValue", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => LifeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("sync", "Sync", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => LifeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("value", "Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => LifeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("count", "Count", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => LifeOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/Bounce/BounceOptionsEditor.js
var BounceOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class BounceOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("bounce", "Bounce");
    this.options = this.group.data;
    this.addFactors();
  }

  addFactors() {
    this.addFactor("horizontal", "Horizontal");
    this.addFactor("vertical", "Vertical");
  }

  addFactor(name, title) {
    const particles = this.particles;
    const group = this.group.addGroup(name, title);
    const randomGroup = group.addGroup("random", "Random");
    randomGroup.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => BounceOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    randomGroup.addProperty("minimumValue", "Minimum Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => BounceOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("value", "Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => BounceOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/Destroy/DestroyOptionsEditor.js
var DestroyOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class DestroyOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("destroy", "Destroy");
    this.options = this.group.data;
    this.addSplit();
    this.addProperties();
  }

  addSplit() {
    const group = this.group.addGroup("split", "Split");
    const particles = this.particles;
    const factorGroup = group.addGroup("factor", "Factor");
    const randomFactorGroup = factorGroup.addGroup("random", "Random");
    randomFactorGroup.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => DestroyOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    randomFactorGroup.addProperty("minimumValue", "Minimum Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => DestroyOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    factorGroup.addProperty("value", "Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => DestroyOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    const rateGroup = group.addGroup("rate", "Rate");
    const randomRateGroup = rateGroup.addGroup("random", "Random");
    randomRateGroup.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => DestroyOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    randomRateGroup.addProperty("minimumValue", "Minimum Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => DestroyOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    rateGroup.addProperty("value", "Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => DestroyOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("count", "Count", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => DestroyOptionsEditor_awaiter(this, void 0, void 0, function* () {
      particles.refresh();
    }));
  }

  addProperties() {
    const group = this.group;
    const particles = this.particles;
    group.addProperty("mode", "Mode", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => DestroyOptionsEditor_awaiter(this, void 0, void 0, function* () {
      particles.refresh();
    })).addItems([{
      value: "none"
    }, {
      value: "split"
    }]);
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/Tilt/TiltOptionsEditor.js
var TiltOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class TiltOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("tilt", "Tilt");
    this.options = this.group.data;
    this.addAnimation();
    this.addProperties();
  }

  addAnimation() {
    const group = this.group.addGroup("animation", "Animation");
    const particles = this.particles;
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => TiltOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("speed", "Speed", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => TiltOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("sync", "Sync", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => TiltOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("direction", "Direction", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => TiltOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems([{
      value: "clockwise"
    }, {
      value: "counter-clockwise"
    }, {
      value: "random"
    }]);
    this.group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => TiltOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("random", "Random", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => TiltOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("value", "Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => TiltOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/Wobble/WobbleOptionsEditor.js
var WobbleOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class WobbleOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("wobble", "Wobble");
    this.options = this.group.data;
    this.addProperties();
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("distance", "Distance", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => WobbleOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => WobbleOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("speed", "Speed", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => WobbleOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/Roll/RollOptionsEditor.js
var RollOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class RollOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("roll", "Roll");
    this.options = this.group.data;
    this.addDarken();
    this.addEnlighten();
    this.addProperties();
  }

  addDarken() {
    const particles = this.particles;
    const group = this.group.addGroup("darken", "Darken");
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => RollOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("value", "Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => RollOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addEnlighten() {
    const particles = this.particles;
    const group = this.group.addGroup("enlighten", "Enlighten");
    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => RollOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("value", "Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => RollOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addProperties() {
    var _a;

    const particles = this.particles;
    const color = typeof this.options.backColor === "string" ? this.options.backColor : this.options.backColor instanceof Array ? this.options.backColor[0] : (_a = this.options.backColor) === null || _a === void 0 ? void 0 : _a.value;
    this.group.addProperty("backColor", "Back Color", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.color, color, false).change(value => RollOptionsEditor_awaiter(this, void 0, void 0, function* () {
      if (typeof value === "string") {
        if (typeof this.options.backColor === "string") {
          this.options.backColor = value;
        } else {
          if (this.options.backColor === undefined) {
            this.options.backColor = {
              value: value
            };
          } else {
            if (this.options.backColor instanceof Array) {
              this.options.backColor = {
                value: value
              };
            } else {
              this.options.backColor.value = value;
            }
          }
        }
      }

      yield particles.refresh();
    }));
    this.group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => RollOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("speed", "Speed", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => RollOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Particles/ParticlesOptionsEditor.js
var ParticlesOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};





















class ParticlesOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent, customName, parentData) {
    this.group = parent.addGroup(customName !== null && customName !== void 0 ? customName : "particles", "Particles", true, parentData);
    this.options = this.group.data;
    this.addBounce();
    this.addCollisions();
    this.addColor();
    this.addDestroy();
    this.addLife();
    this.addLinks();
    this.addMove();
    this.addNumber();
    this.addOpacity();
    this.addRoll();
    this.addRotate();
    this.addShadow();
    this.addShape();
    this.addSize();
    this.addStroke();
    this.addTilt();
    this.addTwinkle();
    this.addWobble();
    this.addProperties();
  }

  addBounce() {
    const options = new BounceOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addCollisions() {
    const options = new CollisionsOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addColor() {
    const options = new ColorOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addDestroy() {
    const options = new DestroyOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addLife() {
    const options = new LifeOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addLinks() {
    const options = new LinksOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addMove() {
    const options = new MoveOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addNumber() {
    const options = new NumberOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addOpacity() {
    const options = new OpacityOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addRoll() {
    const options = new RollOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addRotate() {
    const options = new RotateOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addShadow() {
    const options = new ShadowOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addShape() {
    const options = new ShapeOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addSize() {
    const options = new SizeOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addStroke() {
    const options = new StrokeOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addTilt() {
    const options = new TiltOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addTwinkle() {
    const options = new TwinkleOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addWobble() {
    const options = new WobbleOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("reduceDuplicates", "Reduce Duplicates", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => ParticlesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Interactivity/Modes/ModesOptionsEditor.js
var ModesOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};




class ModesOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("modes", "Modes");
    this.options = this.group.data;
    this.addAttract();
    this.addBubble();
    this.addConnect();
    this.addGrab();
    this.addLight();
    this.addPush();
    this.addRemove();
    this.addRepulse();
    this.addSlow();
    this.addTrail();
  }

  addAttract() {
    const particles = this.particles;
    const group = this.group.addGroup("attract", "Attract");
    group.addProperty("distance", "Distance", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("duration", "Duration", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("easing", "Easing", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems([{
      value: "ease-out-back"
    }, {
      value: "ease-out-circ"
    }, {
      value: "ease-out-cubic"
    }, {
      value: "ease-out-expo"
    }, {
      value: "ease-out-quad"
    }, {
      value: "ease-out-quint"
    }, {
      value: "ease-out-sine"
    }]);
    group.addProperty("factor", "Factor", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("maxSpeed", "Max Speed", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("speed", "Speed", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addBubble() {
    var _a;

    const particles = this.particles;
    const options = this.options.bubble;
    const group = this.group.addGroup("bubble", "Bubble");
    const color = typeof options.color === "string" ? options.color : options.color instanceof Array ? undefined : (_a = options.color) === null || _a === void 0 ? void 0 : _a.value;
    group.addProperty("color", "Color", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.color, color, false).change(value => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      if (typeof value === "string") {
        if (typeof options.color === "string") {
          options.color = value;
        } else {
          options.color = {
            value
          };
        }
      }

      yield particles.refresh();
    }));
    group.addProperty("distance", "Distance", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("duration", "Duration", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("opacity", "Opacity", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).step(0.01).min(0).max(1);
    group.addProperty("size", "Size", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addConnect() {
    const particles = this.particles;
    const group = this.group.addGroup("connect", "Connect");
    const connectLinksGroup = group.addGroup("links", "Links");
    connectLinksGroup.addProperty("opacity", "Opacity", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).step(0.01).min(0).max(1);
    group.addProperty("distance", "Distance", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("radius", "Radius", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addGrab() {
    var _a;

    const particles = this.particles;
    const options = this.options.grab;
    const group = this.group.addGroup("grab", "Grab");
    const grabLinksGroup = group.addGroup("links", "Links");
    const links = options.links;
    const color = typeof links.color === "string" ? links.color : (_a = links.color) === null || _a === void 0 ? void 0 : _a.value;
    grabLinksGroup.addProperty("blink", "Blink", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    grabLinksGroup.addProperty("color", "Color", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.color, color, false).change(value => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      if (typeof value === "string") {
        if (typeof options.links.color === "string") {
          options.links.color = value;
        } else {
          options.links.color = {
            value
          };
        }

        yield particles.refresh();
      }
    }));
    grabLinksGroup.addProperty("consent", "Consent", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    grabLinksGroup.addProperty("opacity", "Opacity", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).step(0.01).min(0).max(1);
    group.addProperty("distance", "Distance", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addLight() {
    var _a, _b, _c;

    const particles = this.particles;
    const options = this.options.light;
    const group = this.group.addGroup("light", "Light");
    const areaGroup = group.addGroup("area", "Light");
    const gradientGroup = areaGroup.addGroup("gradient", "Gradient");
    const startColor = typeof options.area.gradient.start === "string" ? options.area.gradient.start : (_a = options.area.gradient.start) === null || _a === void 0 ? void 0 : _a.value;
    gradientGroup.addProperty("start", "Start", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.color, startColor, false).change(value => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      if (typeof value === "string") {
        if (typeof options.area.gradient.start === "string") {
          options.area.gradient.start = value;
        } else {
          options.area.gradient.start = {
            value
          };
        }
      }

      yield particles.refresh();
    }));
    const stopColor = typeof options.area.gradient.stop === "string" ? options.area.gradient.stop : (_b = options.area.gradient.stop) === null || _b === void 0 ? void 0 : _b.value;
    gradientGroup.addProperty("stop", "Stop", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.color, stopColor, false).change(value => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      if (typeof value === "string") {
        if (typeof options.area.gradient.stop === "string") {
          options.area.gradient.stop = value;
        } else {
          options.area.gradient.stop = {
            value
          };
        }
      }

      yield particles.refresh();
    }));
    areaGroup.addProperty("radius", "Radius", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    const shadowGroup = group.addGroup("shadow", "Shadow");
    const shadowColor = typeof options.shadow.color === "string" ? options.shadow.color : (_c = options.shadow.color) === null || _c === void 0 ? void 0 : _c.value;
    shadowGroup.addProperty("color", "Color", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.color, shadowColor, false).change(value => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      if (typeof value === "string") {
        if (typeof options.shadow.color === "string") {
          options.shadow.color = value;
        } else {
          options.shadow.color = {
            value
          };
        }
      }

      yield particles.refresh();
    }));
    shadowGroup.addProperty("length", "Length", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addPush() {
    const particles = this.particles;
    const group = this.group.addGroup("push", "Push");
    group.addProperty("quantity", "Quantity", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addRemove() {
    const particles = this.particles;
    const group = this.group.addGroup("remove", "Remove");
    group.addProperty("quantity", "Quantity", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addRepulse() {
    const particles = this.particles;
    const group = this.group.addGroup("repulse", "Repulse");
    group.addProperty("distance", "Distance", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("duration", "Duration", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("easing", "Easing", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems([{
      value: "ease-out-back"
    }, {
      value: "ease-out-circ"
    }, {
      value: "ease-out-cubic"
    }, {
      value: "ease-out-expo"
    }, {
      value: "ease-out-quad"
    }, {
      value: "ease-out-quint"
    }, {
      value: "ease-out-sine"
    }]);
    group.addProperty("factor", "Factor", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("maxSpeed", "Max Speed", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("speed", "Speed", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addSlow() {
    const particles = this.particles;
    const group = this.group.addGroup("slow", "Slow");
    group.addProperty("factor", "Factor", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("radius", "Radius", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addTrail() {
    const particles = this.particles;
    const group = this.group.addGroup("trail", "Trail");
    const options = this.options.trail;
    const particlesEditor = new ParticlesOptionsEditor(particles);
    particlesEditor.addToGroup(group, "particles", options);
    group.addProperty("delay", "Delay", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("pauseOnStop", "Pause on Stop", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    group.addProperty("quantity", "Quantity", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => ModesOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
// EXTERNAL MODULE: external {"commonjs":"tsparticles","commonjs2":"tsparticles","amd":"tsparticles","root":"window"}
var external_commonjs_tsparticles_commonjs2_tsparticles_amd_tsparticles_root_window_ = __webpack_require__(764);
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Interactivity/Events/ClickEventsOptionsEditor.js
var ClickEventsOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};




class ClickEventsOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("onClick", "Click Events");
    this.options = this.group.data;
    this.addProperties();
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => ClickEventsOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    const modeSelectInput = this.group.addProperty("mode", "Mode", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => ClickEventsOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems([{
      value: "attract"
    }, {
      value: "bubble"
    }, {
      value: "pause"
    }, {
      value: "push"
    }, {
      value: "remove"
    }, {
      value: "repulse"
    }, {
      value: "trail"
    }]);

    if (typeof external_commonjs_tsparticles_commonjs2_tsparticles_amd_tsparticles_root_window_.loadAbsorbersPlugin !== "undefined") {
      const absorbersGroup = "Absorbers";
      modeSelectInput.addItemGroup(absorbersGroup);
      modeSelectInput.addItem("absorber", undefined, absorbersGroup);
    }

    if (typeof external_commonjs_tsparticles_commonjs2_tsparticles_amd_tsparticles_root_window_.loadEmittersPlugin !== "undefined") {
      const emittersGroup = "Emitters";
      modeSelectInput.addItemGroup(emittersGroup);
      modeSelectInput.addItem("emitter", undefined, emittersGroup);
    }
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Interactivity/Events/HoverEventsOptionsEditor.js
var HoverEventsOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class HoverEventsOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("onHover", "Hover Events");
    this.options = this.group.data;
    this.addParallax();
    this.addProperties();
  }

  addParallax() {
    const particles = this.particles;
    const parallax = this.group.addGroup("parallax", "Parallax");
    parallax.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => HoverEventsOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    parallax.addProperty("force", "Force", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => HoverEventsOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    parallax.addProperty("smooth", "Smooth", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => HoverEventsOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => HoverEventsOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("mode", "Mode", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => HoverEventsOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems([{
      value: "attract"
    }, {
      value: "bubble"
    }, {
      value: "connect"
    }, {
      value: "grab"
    }, {
      value: "light"
    }, {
      value: "repulse"
    }, {
      value: "slow"
    }, {
      value: "trail"
    }]);
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Interactivity/Events/DivsEventsOptionsEditor.js
var DivsEventsOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class DivsEventsOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("onDiv", "Divs Events");
    this.options = this.group.data;
    this.addDivs();

    if (this.options instanceof Array) {
      this.group.addButton("addDiv", "Add Div", false).click(() => DivsEventsOptionsEditor_awaiter(this, void 0, void 0, function* () {
        const arr = this.options;
        const divGroup = this.group.addGroup(arr.length.toString(10), `Div ${arr.length + 1}`, true, this.options);
        this.addDiv(divGroup);
        yield this.particles.refresh();
      }));
    }
  }

  addDivs() {
    const options = this.options;

    if (options instanceof Array) {
      for (let i = 0; i < options.length; i++) {
        const group = this.group.addGroup(i.toString(10), `Div_${i + 1}`, true, options);
        this.addDiv(group);
      }
    } else {
      this.addDiv(this.group);
    }
  }

  addDiv(group) {
    const particles = this.particles;
    const options = group.data;

    if (options.selectors instanceof Array) {
      const selectorsGroup = group.addGroup("selectors", "Selectors");
      selectorsGroup.addButton("addSelector", "Add Selector", false).click(() => DivsEventsOptionsEditor_awaiter(this, void 0, void 0, function* () {
        const arr = options.selectors;
        selectorsGroup.addProperty(arr.length.toString(10), `Selector ${arr.length + 1}`, external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.string).change(() => DivsEventsOptionsEditor_awaiter(this, void 0, void 0, function* () {
          yield particles.refresh();
        }));
        yield this.particles.refresh();
      }));
    } else {
      group.addProperty("selectors", "Selectors", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.string).change(() => DivsEventsOptionsEditor_awaiter(this, void 0, void 0, function* () {
        yield particles.refresh();
      }));
    }

    group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => DivsEventsOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).step(0.01).min(0).max(1);
    this.group.addProperty("mode", "Mode", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => DivsEventsOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems([{
      value: "bounce"
    }, {
      value: "bubble"
    }, {
      value: "repulse"
    }]);
    group.addProperty("type", "Type", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => DivsEventsOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems([{
      value: "circle"
    }, {
      value: "rectangle"
    }]);
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Interactivity/Events/EventsOptionsEditor.js
var EventsOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};






class EventsOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("events", "Events");
    this.options = this.group.data;
    this.addClick();
    this.addDivs();
    this.addHover();
    this.addProperties();
  }

  addClick() {
    const clickEditor = new ClickEventsOptionsEditor(this.particles);
    clickEditor.addToGroup(this.group);
  }

  addDivs() {
    const divsEditor = new DivsEventsOptionsEditor(this.particles);
    divsEditor.addToGroup(this.group);
  }

  addHover() {
    const hoverEditor = new HoverEventsOptionsEditor(this.particles);
    hoverEditor.addToGroup(this.group);
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("resize", "Resize", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => EventsOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Interactivity/InteractivityOptionsEditor.js
var InteractivityOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};





class InteractivityOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("interactivity", "Interactivity");
    this.options = this.group.data;
    this.addEvents();
    this.addModes();
    this.addProperties();
  }

  addModes() {
    const options = new ModesOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addEvents() {
    const options = new EventsOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("detectsOn", "Detects On", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => InteractivityOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems([{
      value: "canvas"
    }, {
      value: "parent"
    }, {
      value: "window"
    }]);
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/BackgroundMask/BackgroundMaskOptionsEditor.js
var BackgroundMaskOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class BackgroundMaskOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("backgroundMask", "Background Mask");
    this.options = this.group.data;
    this.addCover();
    this.addProperties();
  }

  addCover() {
    const particles = this.particles;
    const options = this.options.cover;
    const coverColor = options.color;
    const coverGroup = this.group.addGroup("cover", "Cover");
    coverGroup.addProperty("color", "Color", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.color, coverColor.value, false).change(value => BackgroundMaskOptionsEditor_awaiter(this, void 0, void 0, function* () {
      if (typeof value === "string") {
        coverColor.value = value;
      }

      yield particles.refresh();
    }));
    coverGroup.addProperty("opacity", "Opacity", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => BackgroundMaskOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).step(0.01).min(0).max(1);
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("composite", "Composite", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select).change(() => BackgroundMaskOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).addItems([{
      value: "source-over"
    }, {
      value: "source-in"
    }, {
      value: "source-out"
    }, {
      value: "source-atop"
    }, {
      value: "destination-over"
    }, {
      value: "destination-in"
    }, {
      value: "destination-out"
    }, {
      value: "destination-atop"
    }, {
      value: "lighter"
    }, {
      value: "copy"
    }, {
      value: "xor"
    }, {
      value: "multiply"
    }, {
      value: "screen"
    }, {
      value: "overlay"
    }, {
      value: "darken"
    }, {
      value: "lighten"
    }, {
      value: "color-dodge"
    }, {
      value: "color-burn"
    }, {
      value: "hard-light"
    }, {
      value: "soft-light"
    }, {
      value: "difference"
    }, {
      value: "exclusion"
    }, {
      value: "hue"
    }, {
      value: "saturation"
    }, {
      value: "color"
    }, {
      value: "luminosity"
    }]);
    this.group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => BackgroundMaskOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Infection/InfectionOptionsEditor.js
var InfectionOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class InfectionOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("infection", "Infection");
    this.options = this.group.data;
    this.addStages();
    this.addProperties();
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("cure", "Cure", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => InfectionOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("delay", "Delay", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => InfectionOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => InfectionOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("infections", "Infections", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => InfectionOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addStages() {
    const particles = this.particles;
    const options = this.options;
    const stagesGroup = this.group.addGroup("stages", "Stages");

    for (let i = 0; i < options.stages.length; i++) {
      this.addStage(stagesGroup, options.stages, i + 1);
    }

    stagesGroup.addButton("addStage", "Add Stage", false).click(() => InfectionOptionsEditor_awaiter(this, void 0, void 0, function* () {
      this.addStage(stagesGroup, options.stages, options.stages.length);
      yield particles.refresh();
    }));
  }

  addStage(parent, stages, index) {
    const particles = this.particles;
    const stageGroup = parent.addGroup(index.toString(10), `Stage ${index}`, true, stages);
    const stage = stageGroup.data;
    stageGroup.addProperty("color", "Color", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.color, stage.color, false).change(value => InfectionOptionsEditor_awaiter(this, void 0, void 0, function* () {
      if (typeof value === "string") {
        if (typeof stage.color === "string") {
          stage.color = value;
        } else {
          stage.color = {
            value
          };
        }
      }

      yield particles.refresh();
    }));
    stageGroup.addProperty("duration", "Duration", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => InfectionOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    stageGroup.addProperty("infectedStage", "Infected Stage", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => InfectionOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    stageGroup.addProperty("radius", "Radius", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => InfectionOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    stageGroup.addProperty("rate", "Rate", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => InfectionOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/FullScreen/FullScreenOptionsEditor.js
var FullScreenOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class FullScreenOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("fullScreen", "Full Screen");
    this.options = this.group.data;
    this.addProperties();
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("enable", "Enable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => FullScreenOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("zIndex", "zIndex", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => FullScreenOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/Motion/MotionOptionsEditor.js
var MotionOptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class MotionOptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("motion", "Motion");
    this.options = this.group.data;
    this.addReduce();
    this.addProperties();
  }

  addReduce() {
    const particles = this.particles;
    const coverGroup = this.group.addGroup("reduce", "Reduce");
    coverGroup.addProperty("factor", "Factor", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => MotionOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    })).step(1);
    coverGroup.addProperty("value", "Value", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => MotionOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("disable", "Disable", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => MotionOptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/Sections/Options/OptionsEditor.js
var OptionsEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};










class OptionsEditor extends EditorBase {
  constructor(particles) {
    super(particles);
  }

  addToGroup(parent) {
    this.group = parent.addGroup("options", "Options", true);
    this.options = this.group.data;
    this.addBackground();
    this.addBackgroundMask();
    this.addFullScreen();
    this.addInfection();
    this.addInteractivity();
    this.addMotion();
    this.addParticles();
    this.addProperties();
  }

  addProperties() {
    const particles = this.particles;
    this.group.addProperty("autoPlay", "Auto Play", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => OptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("detectRetina", "Detect Retina", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => OptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("fpsLimit", "FPS Limit", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.number).change(() => OptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("pauseOnBlur", "Pause on Blur", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => OptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
    this.group.addProperty("pauseOnOutsideViewport", "Pause on Outside Viewport", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.boolean).change(() => OptionsEditor_awaiter(this, void 0, void 0, function* () {
      yield particles.refresh();
    }));
  }

  addBackground() {
    const options = new BackgroundOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addBackgroundMask() {
    const options = new BackgroundMaskOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addFullScreen() {
    const options = new FullScreenOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addInfection() {
    const options = new InfectionOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addInteractivity() {
    const options = new InteractivityOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addMotion() {
    const options = new MotionOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

  addParticles() {
    const options = new ParticlesOptionsEditor(this.particles);
    options.addToGroup(this.group);
  }

}
;// CONCATENATED MODULE: ./dist/browser/ParticlesEditor.js
var ParticlesEditor_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class ParticlesEditor extends external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.Editor {
  constructor(particles) {
    super(particles.id, "tsParticles", particles);
    this.particles = particles;
  }

  customize() {
    super.customize();
    this.addOptions();
    this.addButtons();
    this.addPresets();
  }

  addPreset(text, file) {
    if (!this._presets) {
      return;
    }

    this._presets.addItem(file, text);
  }

  addOptions() {
    const options = new OptionsEditor(this.data);
    options.addToGroup(this);
  }

  addButtons() {
    this.addButton("play", "Play");
    this.addButton("pause", "Pause");
    this.addButton("refresh", "Refresh");
    this.addButton("start", "Start");
    this.addButton("stop", "Stop");
    this.addButton("exportConfig", "Export", false).click(() => {
      const json = this.particles.exportConfiguration();
      const contentType = "application/json";
      const blob = new Blob([json], {
        type: contentType
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.download = "particles.json";
      a.href = url;
      a.dataset.downloadUrl = [contentType, a.download, a.href].join(":");
      const e = document.createEvent("MouseEvents");
      e.initMouseEvent("click", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
      a.dispatchEvent(e);
    });
  }

  addPresets() {
    this._presets = this.addProperty("preset", "Preset", external_commonjs_object_gui_commonjs2_object_gui_amd_object_gui_root_window_.EditorType.select, "", false);

    this._presets.change(value => ParticlesEditor_awaiter(this, void 0, void 0, function* () {
      try {
        const res = yield fetch(value);

        if (!res.ok) {
          return;
        }

        yield this.particles.reset();
        this.particles.options.load(yield res.json());
        yield this.particles.refresh();
      } catch (_a) {}
    }));
  }

}
;// CONCATENATED MODULE: ./dist/browser/index.js

function showEditor(container) {
  return new ParticlesEditor(container);
}
}();
/******/ 	return __webpack_exports__;
/******/ })()
;
});